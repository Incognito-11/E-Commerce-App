import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AdminService } from '../services/admin.service';
import { User } from 'src/app/m-core/models/object-model';

declare var $: any;
@Component({
  selector: 'app-user-crud',
  templateUrl: './user-crud.component.html',
  styleUrls: ['./user-crud.component.css'],
})
export class UserCrudComponent implements OnInit {
  all_user_data: any;
  single_user_data: any;
  addEditUserForm!: FormGroup;
  user_dto!: User;
  user_reg_data: any;
  edit_user_id: any;
  upload_file_name!: string;
  addEditUser: boolean = false; // For form Validation
  add_user: boolean = false;
  edit_user: boolean = false;
  popup_header!: string;
  signInFormValue: any = {};

  constructor(
    private formBuilder: FormBuilder,
    private router: Router,
    private adminService: AdminService
  ) {}

  ngOnInit(): void {
    this.getAllUser();
    this.addEditUserForm = this.formBuilder.group({
      name: ['', Validators.required],
      mobNumber: ['', Validators.required],
      age: ['', Validators.required],
      dob: ['', Validators.required],
      email: ['', [Validators.required]],
      password: ['', [Validators.required]],
      addLine1: ['', Validators.required],
      addLine2: [],
      city: ['', Validators.required],
      state: ['', Validators.required],
      zipCode: ['', Validators.required],
      language: ['', Validators.required],
      gender: ['', Validators.required],
      aboutYou: ['', Validators.required],
      uploadPhoto: ['', Validators.required],
      agreetc: [false, Validators.requiredTrue], // Ensure checkbox is checked
      role: ['', Validators.required],
    });
  }
  getAllUser() {
    this.adminService.allUser().subscribe(
      (data) => {
        this.all_user_data = data;
      },
      (error) => {
        console.log('My error', error);
      }
    );
  }
  get rf() {
    return this.addEditUserForm.controls;
  }

  addUserPopup() {
    this.edit_user = false;
    this.add_user = true;
    this.popup_header = 'Add New User';
    this.addEditUserForm.reset();
    // Reset validators to include uploadPhoto for add user
    this.addEditUserForm
      .get('uploadPhoto')
      ?.setValidators([Validators.required]);
    this.addEditUserForm.get('uploadPhoto')?.updateValueAndValidity();
    this.addEditUser = false; // Reset validation flag
  }

  addUser() {
    this.addEditUser = true;
    if (this.addEditUserForm.invalid) {
      alert('Error!! Please fill all required fields correctly.');
      return;
    }
    this.user_reg_data = this.addEditUserForm.value;
    this.user_dto = {
      aboutYou: this.user_reg_data.aboutYou,
      age: this.user_reg_data.age,
      agreetc: this.user_reg_data.agreetc,
      dob: this.user_reg_data.dob,
      email: this.user_reg_data.email,
      gender: this.user_reg_data.gender,
      address: {
        id: 0, // ID is usually generated by the backend for new addresses
        addLine1: this.user_reg_data.addLine1,
        addLine2: this.user_reg_data.addLine2,
        city: this.user_reg_data.city,
        state: this.user_reg_data.state,
        zipCode: this.user_reg_data.zipCode,
      },
      language: this.user_reg_data.language,
      mobNumber: this.user_reg_data.mobNumber,
      name: this.user_reg_data.name,
      password: this.user_reg_data.password,
      uploadPhoto: this.user_reg_data.uploadPhoto,
      role: this.user_reg_data.role,
    };
    this.adminService.addUser(this.user_dto).subscribe(
      (data) => {
        this.addEditUserForm.reset();
        this.getAllUser();
        $('#addEditUserModal').modal('toggle');
      },
      (error) => {
        console.log('my wrong ', error);
      }
    );
  }
  editUserPopup(user_id: any) {
    this.edit_user_id = user_id;
    this.edit_user = true;
    this.add_user = false;
    this.popup_header = 'Edit User';
    this.addEditUser = false; // Reset validation flag

    this.adminService.singleuUser(user_id).subscribe(
      (data) => {
        this.single_user_data = data;
        this.upload_file_name = this.single_user_data.uploadPhoto;
        this.addEditUserForm.setValue({
          name: this.single_user_data.name,
          mobNumber: this.single_user_data.mobNumber,
          age: this.single_user_data.age,
          dob: this.single_user_data.dob,
          email: this.single_user_data.email,
          password: this.single_user_data.password,
          language: this.single_user_data.language,
          gender: this.single_user_data.gender,
          addLine1: this.single_user_data.address.addLine1,
          addLine2: this.single_user_data.address.addLine2,
          city: this.single_user_data.address.city,
          state: this.single_user_data.address.state,
          zipCode: this.single_user_data.address.zipCode,
          aboutYou: this.single_user_data.aboutYou,
          uploadPhoto: '', // Keep empty for edit, handled in updateUser
          agreetc: this.single_user_data.agreetc,
          role: this.single_user_data.role,
        });
        // Remove required validator for uploadPhoto during edit
        this.addEditUserForm.get('uploadPhoto')?.clearValidators();
        this.addEditUserForm.get('uploadPhoto')?.updateValueAndValidity();
      },
      (error) => {
        console.log('My error', error);
      }
    );
  }
  updateUser() {
    if (this.addEditUserForm.invalid) {
      alert('Error!! Please fill all required fields correctly.');
      return;
    }
    this.user_reg_data = this.addEditUserForm.value;
    this.user_dto = {
      id: this.edit_user_id,
      aboutYou: this.user_reg_data.aboutYou,
      age: this.user_reg_data.age,
      agreetc: this.user_reg_data.agreetc,
      dob: this.user_reg_data.dob,
      email: this.user_reg_data.email,
      gender: this.user_reg_data.gender,
      address: {
        id: this.single_user_data.address.id,
        addLine1: this.user_reg_data.addLine1,
        addLine2: this.user_reg_data.addLine2,
        city: this.user_reg_data.city,
        state: this.user_reg_data.state,
        zipCode: this.user_reg_data.zipCode,
      },
      language: this.user_reg_data.language,
      mobNumber: this.user_reg_data.mobNumber,
      name: this.user_reg_data.name,
      password: this.user_reg_data.password,
      uploadPhoto:
        this.user_reg_data.uploadPhoto === ''
          ? this.upload_file_name
          : this.user_reg_data.uploadPhoto,
      role: this.user_reg_data.role,
    };
    this.adminService.editUser(this.edit_user_id, this.user_dto).subscribe(
      (data) => {
        this.addEditUserForm.reset();
        this.getAllUser();
        $('#addEditUserModal').modal('toggle');
        alert('User details updated successfully!');
      },
      (error) => {
        console.log('my wrong ', error);
        alert('Error updating user details. Please check the console.');
      }
    );
  }
  deleteUser(user_id: any) {
    this.adminService.deleteUser(user_id).subscribe(
      (data) => {
        this.getAllUser();
        alert('User deleted successfully!');
      },
      (error) => {
        console.log('My error', error);
        alert('Error deleting user. Please check the console.');
      }
    );
  }
}
